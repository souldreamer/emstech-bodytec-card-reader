///<reference path="../typings/globals/node/index.d.ts"/>

export function byteFromTwoHex(high, low) {
	return ((high & 0xF) << 4) + (low & 0xF);
}

export function bufferEndsWith(buffer: Buffer, ending: Buffer): boolean {
	let bufferLength = buffer.length;
	let endingLength = ending.length;

	// quit early if ending buffer is larger than the first buffer
	if (bufferLength < endingLength) return false;

	return (buffer.slice(bufferLength - endingLength).compare(ending) === 0);
}

export enum KeyType {
	A = 0x60,
	B = 0x61
}

export const KEY_TYPE_A = 0x60;
export const KEY_TYPE_B = 0x61;
export const DEFAULT_KEY = new Buffer([0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);
export const DEFAULT_KEYS = [
	new Buffer([0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
	new Buffer([0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0]),
	new Buffer([0xa1, 0xb1, 0xc1, 0xd1, 0xe1, 0xf1]),
	new Buffer([0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5]),
	new Buffer([0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5]),
	new Buffer([0x4d, 0x3a, 0x99, 0xc3, 0x51, 0xdd]),
	new Buffer([0x1a, 0x98, 0x2c, 0x7e, 0x45, 0x9a]),
	new Buffer([0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
	new Buffer([0xd3, 0xf7, 0xd3, 0xf7, 0xd3, 0xf7]),
	new Buffer([0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff])
];
export const DEFAULT_C1 = 0x0;
export const DEFAULT_C2 = 0x0;
export const DEFAULT_C3 = 0x8;
export const DEFAULT_END_ACS = 0x69;
